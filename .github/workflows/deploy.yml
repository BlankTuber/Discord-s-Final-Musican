# .github/workflows/deploy.yml
name: Deploy Music Bot

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Detect component changes
      id: changes
      run: |
        echo "Detecting changes..."
        
        # Initialize all as false
        echo "janitor_changed=false" >> $GITHUB_OUTPUT
        echo "downloader_changed=false" >> $GITHUB_OUTPUT
        echo "bot_changed=false" >> $GITHUB_OUTPUT
        echo "db_changed=false" >> $GITHUB_OUTPUT
        echo "first_run=false" >> $GITHUB_OUTPUT
        
        # Check if this is the first run (no previous commit)
        if ! git rev-parse HEAD~1 >/dev/null 2>&1; then
          echo "first_run=true" >> $GITHUB_OUTPUT
          echo "janitor_changed=true" >> $GITHUB_OUTPUT
          echo "downloader_changed=true" >> $GITHUB_OUTPUT
          echo "bot_changed=true" >> $GITHUB_OUTPUT
          echo "db_changed=true" >> $GITHUB_OUTPUT
          echo "First deployment detected - building all components"
        else
          # Check what changed since last commit
          if git diff --name-only HEAD~1 HEAD | grep -E "^janitor/|^shared/" | head -1; then
            echo "janitor_changed=true" >> $GITHUB_OUTPUT
            echo "Janitor changes detected"
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -E "^downloader/|^shared/" | head -1; then
            echo "downloader_changed=true" >> $GITHUB_OUTPUT
            echo "Downloader changes detected"
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -E "^bot/|^shared/" | head -1; then
            echo "bot_changed=true" >> $GITHUB_OUTPUT
            echo "Bot changes detected"
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -E "^db/|^shared/" | head -1; then
            echo "db_changed=true" >> $GITHUB_OUTPUT
            echo "Database changes detected"
          fi
        fi
    
    - name: Setup Go
      if: steps.changes.outputs.bot_changed == 'true' || steps.changes.outputs.db_changed == 'true'
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Setup Python
      if: steps.changes.outputs.downloader_changed == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      if: steps.changes.outputs.janitor_changed == 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libsqlite3-dev ffmpeg
    
    - name: Create shared directory
      run: |
        mkdir -p shared
        echo "Shared directory ready"
    
    - name: Build janitor
      if: steps.changes.outputs.janitor_changed == 'true'
      run: |
        echo "Building janitor..."
        cd janitor
        gcc -o janitor janitor.c -lsqlite3 -Wall -O2
        chmod +x janitor
        echo "Janitor built successfully"
    
    - name: Build database initializer
      if: steps.changes.outputs.db_changed == 'true' || steps.changes.outputs.first_run == 'true'
      run: |
        echo "Building database initializer..."
        cd db
        go mod tidy
        go build -o db_init db_initializer.go
        chmod +x db_init
        echo "Database initializer built successfully"
    
    - name: Initialize database if needed
      run: |
        cd db
        if [ ! -f "../shared/musicbot.db" ]; then
          echo "Database not found, initializing..."
          ./db_init -path ../shared
          echo "Database initialized successfully"
        else
          echo "Database already exists"
        fi
    
    - name: Setup downloader dependencies
      if: steps.changes.outputs.downloader_changed == 'true'
      run: |
        echo "Setting up downloader dependencies..."
        cd downloader
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Downloader dependencies updated"
    
    - name: Build bot
      if: steps.changes.outputs.bot_changed == 'true'
      run: |
        echo "Building bot..."
        cd bot
        go mod tidy
        go mod download
        go build -o musicbot cmd/bot/main.go
        chmod +x musicbot
        echo "Bot built successfully"
    
    - name: Run janitor cleanup
      if: steps.changes.outputs.janitor_changed == 'true' || steps.changes.outputs.first_run == 'true'
      run: |
        echo "Running janitor cleanup..."
        cd janitor
        ./janitor ../shared/musicbot.db ../shared || echo "Janitor completed with warnings"
    
    - name: Stop services before restart
      run: |
        echo "Stopping services..."
        sudo systemctl stop musicbot-downloader || echo "Downloader service not running"
        sudo systemctl stop musicbot-bot || echo "Bot service not running"
        sleep 2
    
    - name: Start/restart downloader service
      if: steps.changes.outputs.downloader_changed == 'true' || steps.changes.outputs.first_run == 'true'
      run: |
        echo "Starting downloader service..."
        sudo systemctl start musicbot-downloader
        sudo systemctl enable musicbot-downloader
        sleep 3
        sudo systemctl status musicbot-downloader --no-pager
    
    - name: Start/restart bot service
      if: steps.changes.outputs.bot_changed == 'true' || steps.changes.outputs.first_run == 'true'
      run: |
        echo "Starting bot service..."
        sudo systemctl start musicbot-bot
        sudo systemctl enable musicbot-bot
        sleep 3
        sudo systemctl status musicbot-bot --no-pager
    
    - name: Verify deployment
      run: |
        echo "=== Final Service Status ==="
        echo "Downloader Service:"
        sudo systemctl is-active musicbot-downloader || echo "Not active"
        echo "Bot Service:"
        sudo systemctl is-active musicbot-bot || echo "Not active"
        
        echo "=== Log Check ==="
        echo "Recent downloader logs:"
        sudo journalctl -u musicbot-downloader --no-pager -n 5 || echo "No logs"
        echo "Recent bot logs:"
        sudo journalctl -u musicbot-bot --no-pager -n 5 || echo "No logs"
        
        echo "=== Disk Usage ==="
        du -sh shared/ || echo "Shared directory not found"
        
        echo "Deployment completed!"
